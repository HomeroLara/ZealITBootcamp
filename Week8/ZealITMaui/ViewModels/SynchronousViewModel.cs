using System.Collections.ObjectModel;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using ZealITMaui.Models;

namespace ZealITMaui.ViewModels;

/*
 This approach runs everything sequentially in a blocking manner. 
 Each task must complete before the next one starts.
   
   Pros ‚úÖ
   ‚úî Simple and easy to understand
   ‚úî Predictable execution order
   
   Cons ‚ùå
   ‚ùå Blocks the main thread, making it unresponsive
   ‚ùå Inefficient‚Äîlong operations (e.g., I/O, API calls) freeze the application
 */
public partial class SynchronousViewModel: ObservableObject
{
    [ObservableProperty] 
    private ObservableCollection<string> _cookingSteps = new ObservableCollection<string>();
    
    [ObservableProperty]
    private bool _isCooking;
    
    [ObservableProperty]
    private string _breakfastStatus;
    
    [ObservableProperty]
    private ImageSource _downloadImage;
    
    [ObservableProperty]
    private bool _isDownloading;
    
    [RelayCommand]
    public void StartCooking()
    {
        if (!IsCooking)
        {
            IsCooking = true;
            CookingSteps.Clear();
            CookingSteps.Add("Starting breakfast...");

            CookingSteps.Add("üç≥ Making Eggs ...");
            var eggs = new Egg(TimeSpan.FromSeconds(5));
            eggs.Cook();
            CookingSteps.Add("‚úÖ Eggs are ready!");
            
            CookingSteps.Add("ü•ì Making-Bacon-Pancakes ...");
            var bacon = new Bacon(TimeSpan.FromSeconds(4));
            bacon.Cook();
            CookingSteps.Add("‚úÖ Making-Bacon-Pancakes is ready!");
            
            CookingSteps.Add("üçû Making Toast ...");
            var toast = new Toast(TimeSpan.FromSeconds(1));
            toast.Cook();
            CookingSteps.Add("‚úÖ Toast is ready!");
            
            CookingSteps.Add("‚òï  Making Coffee ...");
            var coffee = new Coffee(TimeSpan.FromSeconds(3));
            coffee.Cook();
            CookingSteps.Add("‚úÖ Coffee is ready!");
            
            CookingSteps.Add("Download Image ...");
            GetImage();
            CookingSteps.Add("‚úÖ Image is downloaded!");
            CookingSteps.Add("Breakfast is ready! üçΩÔ∏è");
        }
    }
    
    [RelayCommand]
    private async Task GetImage()
    {
        try
        {
            IsDownloading = true;

            using HttpClient client = new();
            var imageBytes = await client.GetByteArrayAsync("https://static.bokeh.org/logos/logo.png");

            // Convert byte array to an ImageSource
            DownloadImage = ImageSource.FromStream(() => new MemoryStream(imageBytes));
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            IsDownloading = false;
        }
    }
}